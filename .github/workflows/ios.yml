name: Xcode - Build, Run & Screenshot

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build, Run and Capture Screenshot on iOS Simulator
    runs-on: macos-latest
    env:
      BUNDLE_IDENTIFIER: com.example.MASTestApp  # <-- Update with your actual bundle identifier
      PLATFORM: "iOS Simulator"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo "$scheme_list" | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "$default" > default
          echo "Using default scheme: $default"

      - name: Get Simulator UDID
        id: get_simulator
        run: |
          # This finds the UDID of the first available iPhone simulator
          UDID=$(xcrun simctl list devices available | grep -E "iPhone" | head -1 | awk -F '[()]' '{print $2}' | tr -d ' ')
          echo "Simulator UDID: $UDID"
          echo "UDID=$UDID" >> $GITHUB_OUTPUT

      - name: Build App
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ "$scheme" = "default" ]; then scheme=$(cat default); fi
          if ls -A | grep -iq "\.xcworkspace$"; then
            filetype_parameter="workspace"
            file_to_build=$(ls -A | grep -i "\.xcworkspace$")
          else
            filetype_parameter="project"
            file_to_build=$(ls -A | grep -i "\.xcodeproj$")
          fi
          file_to_build=$(echo "$file_to_build" | awk '{$1=$1;print}')
          xcodebuild build -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$PLATFORM,udid=${{ steps.get_simulator.outputs.UDID }}"

      - name: Boot Simulator
        run: |
          # Boot the simulator (if not already booted)
          xcrun simctl boot ${{ steps.get_simulator.outputs.UDID }} || echo "Simulator already booted"
          # Give the simulator time to finish booting
          sleep 10

      - name: Install and Launch App on Simulator
        run: |
          # Locate the built .app file from DerivedData
          APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "*.app" | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: Could not find the built .app file."
            exit 1
          fi
          echo "Installing app from: $APP_PATH"
          xcrun simctl install ${{ steps.get_simulator.outputs.UDID }} "$APP_PATH"
          echo "Launching app with bundle identifier $BUNDLE_IDENTIFIER"
          xcrun simctl launch ${{ steps.get_simulator.outputs.UDID }} "$BUNDLE_IDENTIFIER"

      - name: Capture Screenshot
        run: |
          # Wait to ensure the app has fully launched
          sleep 10
          xcrun simctl io ${{ steps.get_simulator.outputs.UDID }} screenshot screenshot.png

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Screenshot
          path: screenshot.png
