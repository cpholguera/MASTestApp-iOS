name: Xcode - Build, Run & Screenshot (Simulator Build, Unsigned)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    env:
      BUNDLE_IDENTIFIER: org.owasp.mastestapp.MASTestApp-iOS  # Update with your actual bundle identifier
      PLATFORM: "iOS Simulator"
      SIMULATOR: "iPhone 16"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          brew install ldid || true
          brew install cocoapods || true
          if [ -f Podfile ]; then
            pod install --repo-update || true
          fi

      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo "$scheme_list" | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "DEFAULT_SCHEME=$default" >> $GITHUB_ENV
          echo "Using default scheme: $default"

      - name: Build App for Simulator
        run: |
          if ls -A | grep -iq "\.xcworkspace$"; then
            filetype_parameter="workspace"
            file_to_build=$(ls -A | grep -i "\.xcworkspace$")
          else
            filetype_parameter="project"
            file_to_build=$(ls -A | grep -i "\.xcodeproj$")
          fi
          file_to_build=$(echo "$file_to_build" | awk '{$1=$1;print}')
          # Build for simulator with code signing disabled
          xcodebuild build \
            -scheme "$DEFAULT_SCHEME" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$PLATFORM,name=$SIMULATOR" \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO

      - name: Boot Simulator
        run: |
          # Boot the selected simulator if not already booted
          xcrun simctl boot "$SIMULATOR" || echo "Simulator already booted"
          # Allow time for the simulator to finish booting
          sleep 10

      - name: Install and Launch App on Simulator
        run: |
          # Locate the built .app from DerivedData
          APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "*.app" | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "Error: Could not find the built .app file."
            exit 1
          fi
          echo "Installing app from: $APP_PATH"
          xcrun simctl install "$SIMULATOR" "$APP_PATH"
          echo "Launching app with bundle identifier $BUNDLE_IDENTIFIER"
          xcrun simctl launch "$SIMULATOR" "$BUNDLE_IDENTIFIER"

      - name: Capture Screenshot
        run: |
          # Wait for the app to fully launch before taking a screenshot
          sleep 10
          xcrun simctl io "$SIMULATOR" screenshot screenshot.png

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Screenshot
          path: screenshot.png
